1. Git repositore auf github.com erstellen

=========================================================================
Für den Zugriff mittels ssh:
auf der lokalen Maschine in der GIT Bash einen Schlüssel erstellen:

	ssh-keygen -t ed25519 -C "tstockhinger@gmail.com"

==> auf einer Maschine erstell und dann auf die anderen Maschinen kopieren.

Die Schlüssel liegen:
RASPBERRY: /home/Benutzer/.ssh
WINDOWS  : C:\Users\Benutzer\.ssh

Auf github:
Home -> Settings (ganz oben rechts) -> SSH und GPG keys -> New SSH key
den Inhalt aus der id_ed25519 Datei kopieren (Beginnt mit ssh-ed25519 .....)

Fertig, lokales und remot trepository können jetzt ohen User und Passwort-Abfrage
synchronisiert werden
=========================================================================

2. im lokalen Verzeichnis: 
	git init

3. alles im lokalem Verzeichnis commiten
	git add .
	git commit -am "erstes commit"

4. locales Verzeichniss mit dem repository Verbinden
   die Remote Repository URL bekommt man auf Github im Repository unter Code (SSH auswählen)
	git remote add origin git@github.com:TST64/LIEapp.git
	
5.Überprüfen des Remote Repositories
	git remote -v
	Ausgabe: 	origin  git@github.com:TST64/LIEapp.git (fetch)
				origin  git@github.com:TST64/LIEapp.git (push)

6. Alles nach Github hochladen (neuer Branch)
	git push --set-upstream origin master
	
7. Lokalen und remote Branch miteinander koppeln:
	git checkout master
	
8. Synchrnität prüfen:
	git fetch
	-> keine Ausgabe = alles synchronisiert

9. Deltas im remote und lokalen Repository anzeigen
	git status
	
10. Änderungen hochladen
	git status
Alles zum lokalen Repository hinzufügen
	git add .
oder
	git add <name der geänderten Datei>
Commiten (lokales Repository)
	git commit -am "Kommentar"
Hochladen
	git push
Checken
	git status
	git fetch
	
11. Geänderte Dateien vom remote Repository herunterladen
	git status
-> zeigt aktuellere Files auf dem Remote Repository
	git pull
-> holt die geänderten Files


=========================================================================
Kopie auf anderem Rechner Anlegen
=========================================================================

1. Zielverzeichnis erstellen
	mkdir XXXX
	cd XXXX
2. git initialisieren
	git init

3. lokales und remote Repository verknüpfen (Name und Url des Repositories -> siehe 4. oben)
	git remote add origin git@github.com:TST64/XXXX.git 
	
4. Remote Branch verbinden
	git checkout master

5 Alles holen
	git pull
	

=========================================================================
GITIGNORE
=========================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
	
	




	

